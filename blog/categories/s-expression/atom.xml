<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: S-expression | λ-müesli]]></title>
  <link href="http://krohrer.github.io/blog/categories/s-expression/atom.xml" rel="self"/>
  <link href="http://krohrer.github.io/"/>
  <updated>2015-01-10T05:52:45+01:00</updated>
  <id>http://krohrer.github.io/</id>
  <author>
    <name><![CDATA[Kaspar M. Rohrer]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Bugfix for S-expression Dumping]]></title>
    <link href="http://krohrer.github.io/blog/2010/04/16/bugfix-for-s-expression-dumping/"/>
    <updated>2010-04-16T00:00:00+02:00</updated>
    <id>http://krohrer.github.io/blog/2010/04/16/bugfix-for-s-expression-dumping</id>
    <content type="html"><![CDATA[<p><img class="center" src="{{root_url}}/images/Screen+shot+2010-04-16+at+12.45.56+AM.png"></p>

<p>I’ve pushed a new version of the code. The code to dump s-expressions
did not handle references correctly, but it should now.</p>

<p>Maybe next time, I should prove the correctness using <a href="http://www.lix.polytechnique.fr/coq/">Coq</a>. But then I
would not be writing new code, would I?</p>

<p>Ah, what a dilemma between theoretical exactness and practical
application. I wonder if Haskell will bridge that gap elegantly. We
never really had the time to get aquainted.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Little Something...]]></title>
    <link href="http://krohrer.github.io/blog/2010/04/13/little-something/"/>
    <updated>2010-04-13T00:00:00+02:00</updated>
    <id>http://krohrer.github.io/blog/2010/04/13/little-something</id>
    <content type="html"><![CDATA[<p><img src="/images/Screen+shot+2010-04-14+at+12.16.07+AM.png" alt="Illustrative image" /></p>

<p><img src="/images/Screen+shot+2010-04-14+at+12.16.07+AM.png" alt="Illustrative image" /></p>

<p><img class="center" src="/images/Screen+shot+2010-04-14+at+12.16.07+AM.png"></p>

<p>Here is a little preview of what I am working on at the moment. It is
a little library for the beautiful <sup id="fnref:ocaml-warts"><a href="#fn:ocaml-warts" class="footnote">1</a></sup> <a href="http://caml.inria.fr/ocaml/index.en.html">OCaml</a> programming language
that allows one to inspect any OCaml value in the <a href="http://en.wikipedia.org/wiki/Read-eval-print_loop">REPL</a> by dumping
pretty printed <a href="http://en.wikipedia.org/wiki/S-expression">S-expressions</a> or producing output for <a href="http://www.graphviz.org">Graphviz</a>.</p>

<p>Something along the lines of</p>

<p><code>ocaml
val dump : ?context:dump_context -&gt; ‘a -&gt; unit
val dot : ?context:dot_context -&gt; ‘a -&gt; unit
</code></p>

<p>There will be more.</p>

<p>Oh, and I am trying out the <a href="https://github.com/mmottl/ocaml-makefile">OCamlMakefile</a> as a substitute for
<a href="http://omake.metaprl.org/index.html">OMake</a>, and I must say I really like it so far. Although OMake has
served me well in the past.</p>

<div class="footnotes">
  <ol>
    <li id="fn:ocaml-warts">
      <p>Too be fair, she has some warts, especially with regard to her looks (the quirky syntax). Plus, it can be hard to understand the things she throws at you when you do something wrong (the error messages).  After spending some quality time with OCaml, however, I never ever want to go back to the beast that is C++. That was such an abusive relationship. C on the other hand… <a href="#fnref:ocaml-warts" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
</feed>
